import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.types import Message, InlineQuery

# ðŸ”‘ Pobieranie tokena i ID grupy z Railway (Environment Variables)
TOKEN = os.getenv("BOT_TOKEN")  # WprowadÅº token w ENV (np. Railway)
GROUP_ID = os.getenv("GROUP_ID")  # WprowadÅº ID grupy w ENV
GROUP_LINK = "https://t.me/szonyzometvv"  # ðŸ”¹ Wstaw link do grupy!

bot = Bot(token=TOKEN)
dp = Dispatcher()

# ðŸ”¹ SÅ‚ownik do przechowywania liczby udostÄ™pnieÅ„ uÅ¼ytkownikÃ³w
user_shares = {}

# ðŸ”¹ WysyÅ‚anie wiadomoÅ›ci do grupy po starcie bota
async def send_group_message():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="ðŸ“¤ UdostÄ™pnij do 2 grup", switch_inline_query="ðŸ”¥ DoÅ‚Ä…cz do tej grupy!")]
        ]
    )

    message_text = "ðŸ”“ UdostÄ™pnij ten post do 2 grup, aby uzyskaÄ‡ dostÄ™p!"
    await bot.send_message(chat_id=GROUP_ID, text=message_text, reply_markup=keyboard)

# ðŸ”¹ ObsÅ‚uga komendy /start (opcjonalnie dla uÅ¼ytkownikÃ³w prywatnie)
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("Witaj! UdostÄ™pnij naszÄ… grupÄ™, aby uzyskaÄ‡ dostÄ™p do filmikÃ³w za zaproszenia. ðŸ”¥")

# ðŸ”¹ ObsÅ‚uga udostÄ™pnienia
@dp.inline_query()
async def track_shares(query: InlineQuery):
    user_id = query.from_user.id

    # ZwiÄ™kszamy licznik udostÄ™pnieÅ„ uÅ¼ytkownika
    user_shares[user_id] = user_shares.get(user_id, 0) + 1

    # ðŸ”¹ JeÅ›li uÅ¼ytkownik udostÄ™pniÅ‚ 2 razy, wysyÅ‚amy mu link do grupy na PRIV
    if user_shares[user_id] >= 2:
        await bot.send_message(user_id, f"âœ… Gratulacje! OtrzymaÅ‚eÅ› dostÄ™p do grupy: {GROUP_LINK}")

    await query.answer([])

# ðŸ”¹ Komenda do sprawdzenia ID grupy
@dp.message(Command("groupid"))
async def get_group_id(message: Message):
    await message.answer(f"ID tej grupy to: `{message.chat.id}`")

# ðŸ”¹ Uruchomienie Bota
async def main():
    logging.basicConfig(level=logging.INFO)
    await bot.delete_webhook(drop_pending_updates=True)
    await send_group_message()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
