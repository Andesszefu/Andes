import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

# ğŸ”‘ Pobieranie tokena i ID grupy z Railway (Environment Variables)
TOKEN = os.getenv("7711787949:AAHf9hK8QR4fXVitY2joJjh3sHvrIl5GRUk")  # TwÃ³j token bota
GROUP_ID = os.getenv("-1002168288878")  # ID grupy
GROUP_LINK = "https://t.me/szonyzometvv"  # ğŸ”¹ Wstaw link do grupy!

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# ğŸ”¹ SÅ‚ownik do przechowywania liczby udostÄ™pnieÅ„ uÅ¼ytkownikÃ³w
user_shares = {}

# ğŸ”¹ WysyÅ‚anie wiadomoÅ›ci do grupy po starcie bota
async def send_group_message(_):
    keyboard = InlineKeyboardMarkup()
    share_button = InlineKeyboardButton("ğŸ“¤ UdostÄ™pnij do 2 grup", switch_inline_query="ğŸ”¥ DoÅ‚Ä…cz do tej grupy!")
    keyboard.add(share_button)

    message_text = "ğŸ”“ UdostÄ™pnij ten post do 2 grup, aby uzyskaÄ‡ dostÄ™p!"
    await bot.send_message(chat_id=GROUP_ID, text=message_text, reply_markup=keyboard)

# ğŸ”¹ ObsÅ‚uga komendy /start (opcjonalnie dla uÅ¼ytkownikÃ³w prywatnie)
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("Witaj! UdostÄ™pnij naszÄ… grupÄ™, aby uzyskaÄ‡ dostÄ™p do filmikow za zaproszenia. ğŸ”¥")

# ğŸ”¹ ObsÅ‚uga udostÄ™pnienia
@dp.inline_handler()
async def track_shares(query: types.InlineQuery):
    user_id = query.from_user.id

    # ZwiÄ™kszamy licznik udostÄ™pnieÅ„ uÅ¼ytkownika
    user_shares[user_id] = user_shares.get(user_id, 0) + 1

    # ğŸ”¹ JeÅ›li uÅ¼ytkownik udostÄ™pniÅ‚ 2 razy, wysyÅ‚amy mu link do grupy na PRIV
    if user_shares[user_id] >= 2:
        await bot.send_message(user_id, f"âœ… Gratulacje! OtrzymaÅ‚eÅ› dostÄ™p do grupy: {GROUP_LINK}")

    await query.answer([])

# ğŸ”¹ Komenda do sprawdzenia ID grupy
@dp.message_handler(commands=['groupid'])
async def get_group_id(message: types.Message):
    await message.answer(f"ID tej grupy to: `{message.chat.id}`")

# ğŸ”¹ Uruchomienie Bota
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True, on_startup=send_group_message)
